{% comment %}theme-check-disable RemoteAsset, ImgLazyLoading{% endcomment %}
{%- comment -%}
  Render properly resized image if passed, else render placeholder

  Accepts:
    - image: {Object} Image object
    - additional_attributes: {String} Additional attributes string
    - additional_classes: {String} Additional classes string
    - image_default_width: {Number} Image default width (optional)
    - image_ratio: {String} Image ratio string. Values are "1:1", "3:4", "4:3", "16:9", "2:3", "natural"
    - image_fit: {Boolean} Fit image into container, or resize (optional)
    - image_srcset_widths: {String} Image srcset width string
    - image_sizes: {String} Image sizes attribute string
    - focal_points: {String} Focal point attribute string (optional)
    - alt_string: {String} Alt attribute string (optional)
    - render_skeleton: {Boolean} Render skeleton (optional)
    - skeleton_ratio: {String} Override skeleton ratio (optional)
    - loading: {String} Loading attribute string (optional)
    - placeholder_image: {String} Placeholder image string (optional)
    - minimum_reveal_delay: {Number} Minimum reveal delay (optional)
{%- endcomment -%}
{%- liquid
  unless additional_classes
    assign additional_classes = ''
  endunless

  unless image_default_width
    assign image_default_width = 300
  endunless

  unless alt_string
    assign alt_string = image.alt
  endunless

  unless loading
    assign loading = 'lazy'
  endunless

  unless placeholder_image
    assign placeholder_image = 'placeholder.png'
  endunless

  assign uncropped_image = true
  if image_ratio != 'natural'
    assign values = image_ratio | split: ':'
    assign i_w = values[0] | plus: 0.0
    assign i_h = values[1] | plus: 0.0
    assign image_ratio = i_h | divided_by: i_w

    unless image_fit
      assign uncropped_image = false
    endunless
  endif

  assign image_srcset_widths_array = image_srcset_widths | split: ', '

  assign image_srcset = ''

  if image
    for w in image_srcset_widths_array
      assign width = w | plus: 0

      if uncropped_image
        assign height = width | divided_by: image.aspect_ratio | round
      else
        assign height = width | times: image_ratio | round
      endif

      if width > image.width or height > image.height
        break
      endif

      if uncropped_image
        assign image_url = image | image_url: width: width
      else
        assign image_url = image | image_url: width: width, height: height
      endif

      assign image_srcset = image_srcset | append: image_url | append: ' ' | append: width | append: 'w ' | append: height | append: 'h, '
    endfor

    assign master_width = image.width
    if uncropped_image
      assign master_height = image.height
      assign master_image_url = image | image_url

      assign default_height = default_width | divided_by: image.aspect_ratio | round
      assign image_default_url = image | image_url: width: default_width
    else
      assign master_height = master_width | times: image_ratio | round
      assign default_height = default_width | times: image_ratio | round
      if master_height > image.height
        assign master_height = image.height
        assign master_width = master_height | divided_by: image_ratio | round
      endif
      assign master_image_url = image | image_url: width: master_width, height: master_height
      assign image_default_url = image | image_url: width: default_width, height: default_height
    endif
    assign image_srcset = image_srcset | append: master_image_url | append: ' ' | append: master_width | append: 'w ' | append: master_height | append: 'h'

    assign default_width = image_default_width
    if default_width > image.width
      assign default_width = image.width
    endif
    if uncropped_image
      assign default_height = default_width | divided_by: image.aspect_ratio | round
      assign image_default_url = image | image_url: width: default_width
    else
      assign default_height = default_width | times: image_ratio | round
      if default_height > image.height
        assign default_height = image.height
        assign default_width = default_height | divided_by: image_ratio | round
      endif
      assign image_default_url = image | image_url: width: default_width, height: default_height
    endif
  else
    for w in image_srcset_widths_array
      assign width = w | plus: 0

      if uncropped_image
        assign height = width
      else
        assign height = width | times: image_ratio | round
      endif

      assign image_url_suffix = width | append: 'x' | append: height

      assign image_url = placeholder_image | asset_img_url: image_url_suffix

      assign image_srcset = image_srcset | append: image_url | append: ' ' | append: width | append: 'w ' | append: height | append: 'h, '
    endfor

    assign default_width = image_default_width
    if uncropped_image
      assign default_height = default_width
    else
      assign default_height = default_width | times: image_ratio | round
    endif
    assign image_default_url = image | image_url: width: default_width, height: default_height
  endif

  assign image_width = default_width
  assign image_height = default_height
-%}
<img
  {% if additional_classes %}
    class="{{ additional_classes }}"
  {% endif %}
  src="{{ image_default_url }}"
  srcset="{{ image_srcset }}"
  sizes="{{ image_sizes }}"
  width="{{ image_width }}"
  height="{{ image_height }}"
  alt="{{ alt_string }}"
  loading="{{ loading }}"
  {% if focal_points %}
    style="object-position:{{ focal_points }}"
  {% endif %}
  {{ additional_attributes }}
>
{%- if render_skeleton -%}
  {%- liquid
    assign alt = 'general.media.loading_image' | t: alt: alt_string
    if skeleton_ratio and skeleton_ratio != 'natural'
      assign values = skeleton_ratio | split: ':'
      assign s_w = values[0] | plus: 0.0
      assign s_h = values[1] | plus: 0.0
      assign skeleton_ratio = s_w | divided_by: s_h
      assign image_height = image_width | divided_by: skeleton_ratio | round
    endif
  -%}
  
  {% render 'image-skeleton',
    alt: alt,
    width: image_width,
    height: image_height,
    minimum_reveal_delay: minimum_reveal_delay
  %}
{%- endif -%}
