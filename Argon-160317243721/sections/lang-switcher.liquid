{% if section.settings.enable_redirect %}
  <style>
            body:has(.country-redirect:not(.hidden)) {
                overflow: hidden;
            }

            .country-redirect {
                position: fixed;
                z-index: 99999999;
                top: 0;
                left: 0;
                width: 100%;
                height: 100vh;
                display: flex;
                justify-content: center;
                align-items: center;
                text-align: center;
                transition: all 0.5s;
                background: #0006;
            }

            .country-redirect.hidden {
                opacity: 0;
                pointer-events: none;
            }


         @media only screen and (min-width: 601px) {
            .country-redirect__content {
                --text-color: var(--text-primary);
                --drawer-body-padding: 2rem 2.5rem;
                max-width: 90%;
                min-height: 350px;
                margin: 2rem;
                background: #FFF;
                color: rgb(var(--text-color));
                border-radius: 8px;
                padding: var(--drawer-body-padding);
                position: relative;
                display: flex;
                flex-direction: column;
                justify-content: center;
                align-items: center;
            }
         }

           @media only screen and (max-width: 600px) {
                 .country-redirect__content {
                  --text-color: var(--text-primary);
                  --drawer-body-padding: 2rem 2.5rem;
                  max-width: 360px;
                  min-height: 350px;
                  margin: 2rem;
                  background: #FFF;
                  color: rgb(var(--text-color));
                  border-radius: 8px;
                  padding: var(--drawer-body-padding);
                  position: relative;
                  display: flex;
                  flex-direction: column;
                  justify-content: center;
                  align-items: center;
              }
            }

            button[is=close-button] {
                right: 2.25rem;
              top: 1.85rem;
                position: absolute;
                -webkit-tap-highlight-color: transparent;
                touch-action: manipulation;
                cursor: pointer;
            }

            .country-redirect__content__logo {
             position: relative;
             margin-bottom: 1rem;
            }

            .country-redirect__content__logo img {
                max-height: 40px;
            }

            .country-redirect__content__button-wrapper {
                display: grid;
                grid-template-columns: 1fr 1fr;
                gap: 25px;
            }


            .country-redirect__content h2 {
                font-size: 35px;
                font-weight: bold;
                overflow-wrap: anywhere;
                margin: 0 auto 25px;
                font-family: var(--heading-font-family);
                line-height: 1.1;
              text-transform: uppercase;
                  text-wrap: balance;
            }

            .country-redirect__content p {
                margin: 0 0 25px;
            }

            .country-redirect__content__link {
                display: flex;
                align-items: center;
                justify-content: center;
                position: relative;
                cursor: pointer;
                overflow-wrap: anywhere;
            }
        .country-redirect__content__link.button-text {
          text-decoration: underline;
          color: rgba(var(--color-button),var(--alpha-button-background));
        }
            .country-redirect__content__link-dynamic {
              margin-bottom: 30px;
            }
            .country-redirect .select {
              min-width: 300px;
              max-width: 400px;
              border-top-left-radius: 0;
              border-bottom-left-radius: 0;
              padding-inline-start: 2px;
              margin-left: -30px;
              padding-left: 41px;
            }

          @media only screen and (max-width: 600px) {
                .country-redirect__content__button-wrapper {
                    grid-template-columns: 1fr;
                }
              .country-redirect__content h2 {
                font-size: 25px;
              }
            }
    #lang-switcher-dropdown {
      appearance: none;
      background-image: url("data:image/svg+xml;charset=US-ASCII,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%22292.4%22%20height%3D%22292.4%22%3E%3Cpath%20fill%3D%22%23131313%22%20d%3D%22M287%2069.4a17.6%2017.6%200%200%200-13-5.4H18.4c-5%200-9.3%201.8-12.9%205.4A17.6%2017.6%200%200%200%200%2082.2c0%205%201.8%209.3%205.4%2012.9l128%20127.9c3.6%203.6%207.8%205.4%2012.8%205.4s9.2-1.8%2012.8-5.4L287%2095c3.5-3.5%205.4-7.8%205.4-12.8%200-5-1.9-9.2-5.5-12.8z%22%2F%3E%3C%2Fsvg%3E");
      background-repeat: no-repeat;
      background-position: right 1rem top 50%;
      background-size: 0.65rem auto;
    }



      .lang-switcher-dropdown-outer-flex-container {
        display: flex;
        align-items: center;
        flex-flow: row;
        margin-bottom: 25px;
      }

      .lang-switcher-dropdown-flag {
        display: flex;
        align-items: center;
        line-height: 34px;
        color: #212529;
        text-align: center;
        white-space: nowrap;
        height: 50px;
        width: 47px;
        border: none;
        position: relative;
    	left: 20px;
        z-index: 999;
      }

        img.country-flag {
          width: 32px;
        }

        #lang-flag-span > img {
          width: 32px;
      }
  </style>

  <lang-switcher class="lang-switcher">
    <div class="country-redirect js-country-redirect hidden">
      <div class="country-redirect__content">
        {% if section.settings.header_logo != blank %}
          <div class="country-redirect__content__logo">
            <img class="country-flag" src="{{ section.settings.header_logo | img_url: '' }}">
          </div>
        {% endif %}
        <h2 id="lang-switcher-header">{{ section.settings['heading-primary'] }}</h2>
        <p id="lang-switcher-message" class="text-sm">{{ section.settings['heading-secondary'] }}</p>
        <div class="lang-switcher-dropdown-outer-flex-container">
          <span id="lang-flag-span" class="lang-switcher-dropdown-flag">&nbsp;</span>
          <select class="select" id="lang-switcher-dropdown">
            {% for block in section.blocks %}
              {% if block.type == 'language' %}
                {% if block.settings.global_default %}
                  <option
                    data-languageblock="{{ block.settings.text }}"
                    data-flag-img="{{ block.settings.language_flag_image | img_url: '45x26'}}"
                    value="/"
                  >
                    {{ block.settings.text }}
                  </option>
                {% elsif block.settings.language_code != blank and block.settings.url != blank %}
                  <option
                    data-languageblock="{{ block.settings.language_code }}-{{ block.settings.country_code }}"
                    data-countryByIp="{{ block.settings.country_code | escape }}"
                    data-userBrowserLocale="{{ block.settings.language_code }}"
                    data-flag-img="{{ block.settings.language_flag_image | img_url: '45x26' }}"
                    value="{{ block.settings.url }}"
                  >
                    {{ block.settings.text }}
                  </option>
                {% endif %}
              {% endif %}
            {% endfor %}
          </select>
        </div>

        <a
          id="lang-switcher-accept"
          tabindex="0"
          class="button button--xl country-redirect__content__link country-redirect__content__link-dynamic js-stay-link"
          href="/"
          onclick="setLanguageAndSetCookieDismiss()"
        >
          {{ section.settings.dynamic_btn }}
        </a>
        <a
          id="lang-switcher-dismiss"
          class="button-text country-redirect__content__link js-dismiss-link"
          href="/"
        >
          {{- section.settings.dismiss_btn -}}
        </a>
      </div>
    </div>
  </lang-switcher>

  <script>
//# sourceURL=lang-switcher.liquid.js
var languageSwitcherDropdownElement = document.getElementById('lang-switcher-dropdown');
var requestPath = '{{ request.path }}';
var _stayLink = document.querySelector('.js-stay-link');
var dismissLinks = document.querySelectorAll('.js-dismiss-link');
var countryRedirect = document.querySelector('.js-country-redirect');
var ipstackApiKey = '{{ section.settings.ipstack_key }}';
var apiUrl = 'https://api.ipstack.com/check?access_key=' + ipstackApiKey;
const _prefixSlash = '/';
let _linkDomain = `https://${window.location.host}`;
var _langSwitcherHeader = document.getElementById('lang-switcher-header');
var _langSwitcherMessage = document.getElementById('lang-switcher-message');
var _langSwitcherAccept = document.getElementById('lang-switcher-accept');
var _langSwitcherDismss = document.getElementById('lang-switcher-dismiss');
var _langSwitcherFlagSpan = document.getElementById('lang-flag-span');
var flagHasBeenSetIntially = false;
  
var languageBlocksArray = [
  {% for block in section.blocks %}
  {% if block.type == 'language' %}
  {
    countryCode: '{{ block.settings.country_code | escape }}',
    languageCode: '{{ block.settings.language_code }}',
    languageUrl: '{{ block.settings.url }}',
    countryHeader: '{{ block.settings.country_header | escape }}',
    countryMessage: '{{ block.settings.country_message | escape }}',
    countryAcceptBtn: '{{ block.settings.country_accept_btn | escape }}',
    countryDismissBtn: '{{ block.settings.country_dismiss_btn | escape }}',
    isGlobalDefault: {{ block.settings.global_default }},
    text: '{{ block.settings.text | escape }}'
  },
  {% endif %}
  {% endfor %}
];

//console.log("requestPath = " + requestPath);
//console.dir('languageBlocksArray:');
//console.dir(languageBlocksArray);

function hideCountryRedirectModal() {
  if(!countryRedirect.classList.contains('hidden'))
    countryRedirect.classList.add('hidden');
}

function showCountryRedirectModal() {
   if(countryRedirect.classList.contains('hidden'))
    countryRedirect.classList.remove('hidden');
}

{% if section.settings.dismiss_enabled %}
function dismissPopupOnOutsideClick(popup) {
  // Dismiss popup when clicking outside the content
  popup.addEventListener('click', function (event) {
      if (event.target === popup) {
          //popup.style.display = 'none';
        hideCountryRedirectModal();
      }
  });
}
{% endif %}
  
  
setLanguage();

function init() {
const enableRedirect = {{ section.settings.enable_redirect }};
  if (enableRedirect) {
    var langUrl = proposeRedirect();
    updateSelectedLanguageFlagByLangUrl(langUrl);
  } else {
    hideCountryRedirect();
  }
}

//this updates flag in top right corner on the language link/href in topBar
function setTopBarFlag() {
  let languageSwitcherInTopBar = document.querySelector('.Language-switch-selector');

  if(languageSwitcherInTopBar) {
      let languageTextToFindAmongOptions = languageSwitcherInTopBar.innerHTML;

      let topBarCountryFlagContainer = document.querySelectorAll('.top-bar-country-flag');
      let matchingOptionWithFlagImage = [...languageSwitcherDropdownElement.options].find((option) => option.innerHTML.trim() === languageTextToFindAmongOptions); //.innerHTML.trim() or .dataset.languageblock
  
      //data-flag-img
      let selectedOptionImgFlag = matchingOptionWithFlagImage?.dataset?.flagImg;
    
      if (selectedOptionImgFlag?.includes('no-image')) {
        topBarCountryFlagContainer.forEach((element) => { 
          element.innerHTML = '&nbsp;';  
        });
      } else {
      if(selectedOptionImgFlag !== undefined)
        topBarCountryFlagContainer.forEach((element) => { 
          element.innerHTML = '<img src="'+selectedOptionImgFlag+'"></img>';
        });      
      }
  }
}
  
languageSwitcherDropdownElement.addEventListener('change', function() {
  setManualStayLink(this.value, true);
  
  if(flagHasBeenSetIntially)
    updateSelectedLanguageFlagBySelectedOptionOnSelectionChange();
});

{% assign defaultLanguage = '' %}
{% for block in section.blocks %}
  {% if block.type == 'language' %}
    {% if block.settings.global_default %}
      {% assign defaultLanguage = block.settings.text %}
    {% endif %}
  {% endif %}
{% endfor %}
    
// Check if defaultLanguage is defined before calling the function
if ('{{ defaultLanguage }}' !== '') {
  setDefaultLanguage('{{ defaultLanguage }}');
}

function removeAllPrefixedChar(url, charToRemove='/') {
  while (url.startsWith(charToRemove)) {
    url = url.substring(charToRemove.length);
  }
  return url;
}

function removeTrailingSlashes(str) {
  if(str === undefined)
    return '';

  if(str === null)
    return '';
  
  if(str?.length === 0)
    return '';
  
 return str?.replace(/\/$/, '') || '';
}

function _setManualStayLinkOnRequestPathContainsALanguage(newUrl, prefixSlashInFront = true) { 
    newUrl = removeTrailingSlashes(removeAllPrefixedChar(replaceExistingLangCountryCodeInUrl(newUrl)));
    
    if (!prefixSlashInFront && newUrl.charAt(0) === _prefixSlash) {
      newUrl = removeAllPrefixedChar(newUrl, _prefixSlash);
      
      if (newUrl.length > 1)
        newUrl =  removeTrailingSlashes(_prefixSlash+ removeAllPrefixedChar(newUrl));
    }
    
    if(prefixSlashInFront)
      newUrl = removeTrailingSlashes(_linkDomain + _prefixSlash + newUrl);
    else
      newUrl = removeTrailingSlashes(_linkDomain + newUrl);
    
  return newUrl;
}

function _setManualStayLinkOnRequestPathDoesNOTContainALanguage(newUrl, prefixSlashInFront = true) { 
  var langUrl = newUrl;
  newUrl = removeTrailingSlashes(removeAllPrefixedChar(replaceExistingLangCountryCodeInUrl(newUrl)));
    
      if (!prefixSlashInFront && newUrl.charAt(0) === _prefixSlash) {
        newUrl = removeAllPrefixedChar(newUrl, _prefixSlash);
      
      if (newUrl.length > 1)
        newUrl =  removeTrailingSlashes(_prefixSlash+ removeAllPrefixedChar(newUrl));
    }

  var langFixation = '';
  
  if(langUrl.length > 1)
    langFixation = langUrl + _prefixSlash;
  
    if(prefixSlashInFront)
      newUrl = removeTrailingSlashes(_linkDomain + _prefixSlash + langFixation + newUrl);
    else
      newUrl = removeTrailingSlashes(_linkDomain + langFixation + newUrl);
    
  return newUrl;
}
  
function setManualStayLink(newUrl, prefixSlashInFront = true) {
  _linkDomain = `https://${window.location.host}`;
  var newPath;
  
  if (doesRequestPathContainALanguage())
    newPath = _setManualStayLinkOnRequestPathContainsALanguage(newUrl, prefixSlashInFront);    
  else
    newPath = _setManualStayLinkOnRequestPathDoesNOTContainALanguage(newUrl, prefixSlashInFront);    
  
   _stayLink.href = removeTrailingSlashes(newPath);

  return _stayLink.href;
}

function setLanguageAndSetCookieDismiss() {
  setLanguage();
  setCookieDismissRedirect();
}   
   
function setLanguage() {
  //console.log(':::setLanguage() was called');
  var selectedLanguageBlock = languageBlocksArray.find((block) => requestPath.includes(block.languageUrl.trim().length > 1 ? block.languageUrl : '<-%>') );
  
  if (selectedLanguageBlock?.text)
    localStorage.setItem("selectedLanguageName", selectedLanguageBlock?.text);
}

function setDefaultLanguage(defaultLanguage) {
  if (!localStorage.getItem("defaultLanguage") && defaultLanguage)
    localStorage.setItem("defaultLanguage", defaultLanguage);
}
    
function setCookieDismissRedirect() {
  setCookie('dismissed_redirect', 'true', parseInt({{ section.settings.cookie_hours }}));
  hideCountryRedirectModal();
}
   
dismissLinks.forEach(function (dismissLink) {
  dismissLink.addEventListener('click', function (event) {
      event.preventDefault();
    setCookieDismissRedirect()
  });
});

function getBrowserLocales() {
  const browserLocales = navigator.languages || [navigator.language];
  
  for (const locale of browserLocales) {
    const normalizedLocale = locale.toLowerCase();
    
    if (normalizedLocale)
      return normalizedLocale;
  }

  return undefined;
}

function sendAjaxRequest(url) {
    var httpReq = new XMLHttpRequest();
    httpReq.open("GET", url, false);
    httpReq.send(null);
  
 return httpReq.responseText;
}
  
function getCountryCodeByIP() {
  try {
    var response = JSON.parse(sendAjaxRequest(apiUrl));
     
    if(typeof response.country_code !== "undefined")
          return response.country_code.toLowerCase();
  } catch (e) {
      console.log(e.message);
  }

  return '';
}

function doesRequestPathContainALanguage() {
  return requestPath[3] === '-';
}

function detectLanguage() {
  let browserLanguageAndCountry = getBrowserLocales() || ''; // Initialize with an empty string if not available
  let countryByIp = '';
  let userBrowserLocale = browserLanguageAndCountry.split('-')[0];

  if (ipstackApiKey) {
    let countryCodeByIP = getCountryCodeByIP();

    if (countryCodeByIP) {
      countryByIp = countryCodeByIP;
      let languageCode = userBrowserLocale;
      browserLanguageAndCountry = `${languageCode}-${countryCodeByIP}`;
    }
  }

  const retrievedLanguage = {
    userBrowserLanguageAndCountry: browserLanguageAndCountry,
    countryByIp: countryByIp,
    userBrowserLocale: userBrowserLocale,
  };

  return retrievedLanguage;
}

function setTranslationsBasedOnBrowserLocale(userBrowserLocale) {
  //console.error('setTranslationsBasedOnBrowserLocale():');
  const currentBlock = languageBlocksArray.find((block) => block.languageCode === userBrowserLocale);
  if (currentBlock) {
    _langSwitcherHeader.innerHTML = currentBlock.countryHeader || '';
    _langSwitcherMessage.innerHTML = currentBlock.countryMessage || '';
    _langSwitcherAccept.innerHTML = currentBlock.countryAcceptBtn || '';
    _langSwitcherDismss.innerHTML = currentBlock.countryDismissBtn || '';
  }
}
 
//given url param is actually 'language-countrycode'
function replaceExistingLangCountryCodeInUrl(url) {
    if (requestPath === '/')
     return requestPath.replace(/\/[a-z]{2}-[a-z]{2}(\/|$)/, '' + '$1');  //on root page
  return requestPath.replace(/\/[a-z]{2}-[a-z]{2}(\/|$)/, '/' + url + '$1'); //on a sub-page or translation/language
}

function GetUrlWhenBlockCountryEqualsCountryByIp(currentBlock) {
  var searchStr = currentBlock.languageUrl;

  if(currentBlock.languageUrl.charAt(0) === _prefixSlash)
    return '/';
  
  if(searchStr.trim().length === 0)
    searchStr = '<%->'; //random set of chars not to match on purpose
  
  let doesRequestPathIncludeUserCountry = requestPath.includes(searchStr);
  
  if (doesRequestPathIncludeUserCountry) {
    //console.log('Step 2-1 (old step 7): Request URL includes currentBlock.languageUrl:', requestPath);
    return requestPath;
  }
  
  if (doesRequestPathContainALanguage()) {
    //console.log('Step 2-2 (old step 9): Request path already contains a language');
    return replaceExistingLangCountryCodeInUrl(currentBlock.languageUrl); // Make sure 'url' is defined somewhere.
  }
  
  //console.log('Step 2-3: Request path does not contain a language');
  return `/${currentBlock.languageUrl}${requestPath}`;
}

function selectOptionInLanguageSwitcherDropdownByCountryCode(countryCode) {
  //console.log(':::selectOptionInLanguageSwitcherDropdownByCountryCode() was called');
  let optionToSelect = [...languageSwitcherDropdownElement.options].find((option) => option.dataset.countrybyip === countryCode);

  if (optionToSelect)
    optionToSelect.selected = true;

  updateSelectedLanguageFlagBySelectedOptionOnSelectionChange();
}
  
function getUrlFallbackWhenNothingMatchesBlockOptions(currentBlock, countryByIp) {
  var url;
  
  if (requestPath.includes(currentBlock.languageUrl)) {
    //console.log('Step 7-1');
    url = requestPath;
  } else {
    //console.log('Step 7-2');
    let langFound = false;

    for (let block of languageBlocksArray) {
      if (block.countryCode === countryByIp) {
        url = `/${block.languageUrl}${requestPath}`;
        langFound = true;
        //console.log('URL:', url);
        //console.log(block);
        break;
      }
    }
    //console.log('Step 7-3');
    if (!langFound) {
      url = `/${currentBlock.languageUrl}${requestPath}`;
      //console.log('Last URL:', url);
      //console.log(currentBlock);
    }
  }
  //console.log('Step 7-4');

  return url;
}

function proposeRedirect() {
  var detectedLanguage = detectLanguage();
  var countryByIp = detectedLanguage.countryByIp;
  var userBrowserLocale = detectedLanguage.userBrowserLocale;
  var doesRequestPathContainALanguageAlready = doesRequestPathContainALanguage();
  var url = '';
  var languageFound = false;

  if (languageBlocksArray.length > 0) {
    setTranslationsBasedOnBrowserLocale(userBrowserLocale);
    for (let currentBlock of languageBlocksArray) {     
      if (currentBlock.countryCode === countryByIp) {
          //console.log('comparison of ' + currentBlock.countryCode +'==='+ countryByIp);
          //console.log('Step 2: Block country code matches IP/browser country code:', currentBlock.countryCode);
          url = GetUrlWhenBlockCountryEqualsCountryByIp(currentBlock);
          languageFound = true;
        
        if(doesRequestPathContainALanguageAlready) {     
          //console.log('Step 2-001: Block country code matches IP/browser country code:', currentBlock.countryCode);
          let languageFromUrl = requestPath.split('/');
          let languageCode = languageFromUrl[1];
          let languageParts = languageCode.split('-');
          let countryCode = languageParts[1];

          //updateSelectedLanguageFlagByLangUrl(languageFromUrl);
          
          if(countryCode === countryByIp)
            setCookieDismissRedirect();
        } else {
          //updateSelectedLanguageFlagByLangUrl(url);
        }    
        break;
      } else if (doesRequestPathContainALanguageAlready) {
        //console.log('Step 5: Request Path Contains A Language Already, but it doesn\'t match our own IP/browser country code - finding matching code and setting button URL to ours.');
        let languageFromUrl = requestPath.split('/');
        let languageCode = languageFromUrl[1];

        if (currentBlock.countryCode === countryByIp) {
          //console.log('Step 5.1: Country code matches IP/browser country code.');
          
          let languageParts = languageCode.split('-');
          let countryCode = languageParts[1];

          if (countryCode === currentBlock.countryCode) {
            //console.log('Step 5.2: Country code matches current block country code.');
            setCookieDismissRedirect();

          } else {
            //TODO: This part might not be needed anymore, needs testing.
            url = currentBlock.languageUrl.join('/');
            //console.error('Step 5.3');
            //updateSelectedLanguageFlagByLangUrl(url);
          }

          languageFound = true;
          break;
        }
      } else if (!doesRequestPathContainALanguageAlready && currentBlock.languageCode.startsWith(userBrowserLocale)) {
        //console.log('Step 7: Language code starts with UserBrowserLocale.');
        url = getUrlFallbackWhenNothingMatchesBlockOptions(currentBlock, countryByIp);
        //updateSelectedLanguageFlagByLangUrl(url);
        break;
      }
    }
  }

  //console.log("Updated FINAL STAGE of stayLink.href =", url);
  _stayLink.href = url;

  if (!languageFound) 
   url = _useDefaultLanguage();

  return url;
}
  
//this is only meant to be used as a fallback
function _useDefaultLanguage() {
  let storedDefault = localStorage.getItem("defaultLanguage");
  console.log('Step 10: Default language not found in section block array');
  let globalDefaultElement = languageBlocksArray.find((element) => element.isGlobalDefault === true);
  
  if (globalDefaultElement) {
    //console.log('globalDefaultElement.languageUrl: ' + globalDefaultElement.languageUrl);   
    var globalDefaultUrl = globalDefaultElement.languageUrl;

    if(globalDefaultUrl)
      globalDefaultUrl = '/';
    
    setManualStayLink(globalDefaultUrl, true);
    
    if (!doesRequestPathContainALanguage())
      setCookieDismissRedirect();
  }

  return globalDefaultUrl;
}

function setCookie(name, value, hours) {
  var date = new Date();
  date.setTime(date.getTime() + (hours * 60 * 60 * 1000));
  var expires = "expires=" + date.toUTCString();
  document.cookie = name + "=" + value + "; " + expires + "; path=/";
}
  
function getCookie(name) {
  let cookieName = name + "=";
  let decodedCookie = decodeURIComponent(document.cookie);
  let splitCookie = decodedCookie.split(';');

  for (let cookie of splitCookie) {
    let trimmedCookie = cookie.trim();

    if (trimmedCookie.indexOf(cookieName) === 0)
      return trimmedCookie.substring(cookieName.length);
  }

  return null;
}

function showLangSwitcherModal() {
  let userBrowserLocale = getBrowserLocales();
  setTranslationsBasedOnBrowserLocale(userBrowserLocale);
  var countryByIp = getCountryCodeByIP();  
  selectOptionInLanguageSwitcherDropdownByCountryCode(countryByIp);
  showCountryRedirectModal();
}

function checkDismissedRedirect() {
  if (getCookie('dismissed_redirect') === 'true')
    return true;
  
 return false;
}
 
//this updates flag in modal pop-up only
function updateSelectedLanguageFlagByLangUrl(langUrl) { 
  if(langUrl === undefined)
    return;

  if(langUrl === null)
    return;

  if (langUrl.length === 0)
    return;
 
  if(typeof(langUrl) == 'object')
    return;

  var langCode = '';
  
 if(langUrl[0] === '/')
   langUrl = langUrl?.substr(1, langUrl?.length);

  if(langUrl[langUrl?.length-1] === '/')
    langUrl = langUrl?.substr(0, langUrl?.length-1);
  
	langCode = langUrl;

    if(langCode?.length > 8) {
      langCode = langCode.split('/')[0];
    }
  
   var selectedOption = document.querySelector('select#lang-switcher-dropdown option[value='+langCode+']');

  if (selectedOption === null || selectedOption === undefined) {
      //console.error('selected option was null or undefined');
    return;
  }
   //find option from langcode
   var selectedOptionImgFlag = selectedOption?.dataset?.flagImg
    
   if (selectedOptionImgFlag.includes('no-image')) {
     let noImage = '&nbsp;';
     _langSwitcherFlagSpan.innerHTML = noImage;
   } else {
     let countryFlagImg = '<img src="'+selectedOptionImgFlag+'"></img>';
    _langSwitcherFlagSpan.innerHTML = countryFlagImg;
   }
  
    flagHasBeenSetIntially = true;
}

//this updates flag in modal pop-up only
function updateSelectedLanguageFlagBySelectedOptionOnSelectionChange() {
  let selectedOption = languageSwitcherDropdownElement.options[languageSwitcherDropdownElement.selectedIndex];
  let selectedOptionImgFlag = selectedOption?.dataset?.flagImg;
  if (selectedOptionImgFlag?.includes('no-image'))
    _langSwitcherFlagSpan.innerHTML = '&nbsp;';  
  else
    _langSwitcherFlagSpan.innerHTML = '<img src="'+selectedOptionImgFlag+'"></img>';
}

document.addEventListener('DOMContentLoaded', function () {
  let dismissedRedirect = getCookie('dismissed_redirect');

  if (dismissedRedirect !== 'true') {
    console.warn("dismissedRedirect !== true");
    console.warn("will show langswitchermodal now");
    showLangSwitcherModal();
    }

  {% if section.settings.dismiss_enabled %}
   dismissPopupOnOutsideClick(countryRedirect);
  {% endif %}
  
   init();
   setTopBarFlag();
});
  </script>
{% endif %}
{% schema %}
{
  "name": "MCB Language Switcher",
  "blocks": [
    {
      "type": "language",
      "name": "Language",
      "settings": [
              {
          "type": "text",
          "id": "text",
          "label": "Country name",
          "default": "Denmark (DKK)"
        },
    {
      "id": "global_default",
      "type": "checkbox",
      "label": "Is this the global/default site?",
      "info": "For the language switcher functionality to work, we require that there is only one global/default. (A Language where the checkbox is enabled, and the rest of the fields below this text remain empty)"
    },
        {
          "type": "text",
          "id": "country_code",
          "label": "Country Code",
          "default": "dk",
          "info": "If Country Code = Country Code from IP, redirect the user. Use Country Codes from [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements) standard format"
        },
        {
          "type": "text",
          "id": "url",
          "label": "Redirect to shopify Language URL",
          "default": "en-dk",
          "info": "if we find a matching Country Code. Redirect the user to this URL/path."
        },
             {
          "type": "text",
          "id": "language_code",
          "label": "Language Code",
          "default": "da",
          "info": "If Language Code = Language Code from user browser, show localized messages in the modal. Use language codes from [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes)"
        },
        {
          "id": "language_flag_image",
          "type": "image_picker",
          "label": "Language flag image"
        },
        {
          "type": "text",
          "id": "country_header",
          "label": "Localised Header",
          "info": "This localized Header will be shown, if user browser language matches language code for this block. If not filled out, default 'en' text will show."
        },
        {
          "type": "text",
          "id": "country_message",
          "label": "Localised Message",
          "info": "This localized Message will be shown, if user browser language matches language code for this block. If not filled out, default 'en' text will show."
        },
        {
          "type": "text",
          "id": "country_accept_btn",
          "label": "Localised Accept button",
          "info": "This localized text will be shown, if user browser language matches language code for this block. If not filled out, default 'en' text will show."
        },
                {
          "type": "text",
          "id": "country_dismiss_btn",
          "label": "Localised Dismiss button",
          "info": "This localized text will be shown, if user browser language matches language code for this block. If not filled out, default 'en' text will show."
        }
      ]
    }
  ],
  "settings": [
    {
      "id": "enable_redirect",
      "type": "checkbox",
      "label": "Enable Language switcher?"
    },
    {
      "id": "dismiss_enabled",
      "type": "checkbox",
      "label": "Dismiss when clicking outside the modal"
    },
    {
      "id": "ipstack_key",
      "type": "text",
      "label": "ipstack API Key",
      "info": "https://ipstack.com/product"
    },
    {
      "id": "cookie_hours",
      "type": "text",
      "label": "Cookie expiration in hours",
      "info": "Enter how many hours you'd like the browser to the cookie to be stored"
    },
    {
      "id": "header_logo",
      "type": "image_picker",
      "label": "Header logo"
    },
    {
      "type": "header",
      "content": "Headers"
    },
    {
      "id": "heading-primary",
      "type": "text",
      "label": "Header (en)",
      "default": "Are you at the right place?",
      "info": "This header will be shown to all browsers with 'en' language, or if no match in block rules are found"
    },
    {
      "id": "heading-secondary",
      "type": "text",
      "label": "Message (en)",
      "default": "If you don't mind, we would like to redirect you to the appropriate shop location.",
       "info": "This message will be shown to all browsers with 'en' language, or if no match in block rules are found"
    },
    {
      "type": "header",
      "content": "Buttons"
    },
    {
      "id": "dynamic_btn",
      "type": "text",
      "label": "Accept button (en)",
      "default": "Continue",
      "info": "This button text will be shown to all browsers with 'en' language, or if no match in block rules are found"
    },
    {
      "id": "dismiss_btn",
      "type": "text",
      "label": "Cancel/Dismiss button (en)",
      "default": "I'll stay",
      "info": "This button text will be shown to all browsers with 'en' language, or if no match in block rules are found"
    }
  ],
  "presets": [{
    "name": "Language Switcher",
    "category": "Text"
  }]
}
{% endschema %}
