{% # prettier-ignore %}

{% comment %} Inject CI {% endcomment %}


{%- liquid
    if template.name == 'index'
    assign pageType = 'home'
  elsif search.performed
    assign pageType = 'searchresults'
  elsif template.name == 'collection'
    assign pageType = 'category'
  elsif template.name == 'product'
    assign pageType = 'product'
  elsif template.name == 'cart'
    assign pageType = 'cart'
  elsif template.name == 'checkout'
    assign pageType = 'checkout'
  else
    assign pageType = 'other'
  endif
-%}

{% comment %} Inject GTM {% endcomment %}

<script>
!function(){"use strict";function e(e){return function(e){for(var t=0,r=document.cookie.split(";");t<r.length;t++){var n=r[t].split("=");if(n[0].trim()===e)return n[1]}}(e)}function t(e){return localStorage.getItem(e)}function r(e){return window[e]}function n(e,t){var r=document.querySelector(e);return t?null==r?void 0:r.getAttribute(t):null==r?void 0:r.textContent}!function(o,i,a,c,u,l,s,v,d,f){var g,E,I,m;try{E=v&&(I=navigator.userAgent,(m=/Version\/([0-9\._]+)(.*Mobile)?.*Safari.*/.exec(I))&&parseFloat(m[1])>=16.4)?function(o,i,a){void 0===i&&(i="");var c={cookie:e,localStorage:t,jsVariable:r,cssSelector:n},u=Array.isArray(i)?i:[i];if(o&&c[o])for(var l=c[o],s=0,v=u;s<v.length;s++){var d=v[s],f=a?l(d,a):l(d);if(f)return f}else console.warn("invalid uid source",o)}(v,["_y","_shopify_y"]):void 0}catch(e){console.error(e)}var T=o;T[c]=T[c]||[],T[c].push({"gtm.start":(new Date).getTime(),event:"gtm.js"});var _=i.getElementsByTagName(a)[0],p=E?"&bi="+encodeURIComponent(E):"",A=i.createElement(a),y=E?"kp"+s:s;A.async=!0,A.src="https://gtm.argonaudio.com/"+y+".js?id=GTM-K3GDSP8"+p,null===(g=_.parentNode)||void 0===g||g.insertBefore(A,_)}(window,document,"script","dataLayer",0,0,"fewptsgg","cookie")}();
</script>

<script>
//# sourceURL=mcbDataLayerHelper.js
window.dataLayer = window.dataLayer || [];
window.dataLayer.push({
  pageType: '{{request.page_type}}',
  currency: '{{shop.currency}}',
});

class McbGtmLayer {
  DEBUG = false;
  ITEMSLIST_KEY = 'item_list';

  constructor() {
    this.initializor();

    if (this.DEBUG) console.error('McbGtmLayerHelper is in debugging mode');
  }

  initializor() {
    if (this.DEBUG) console.warn('McbGtmLayerHelper Initialized');
  }

  getFormattedPrice(item, divideBy100) {
    let itemPrice = 0;

    if (item?.price) return divideBy100 ? item.price / 100 : item.price;
    else if (item?.final_price) return divideBy100 ? item.final_price / 100 : item.price;
    else if (item?.line_price) return divideBy100 ? item.line_price / 100 : item.price;

    if (typeof itemPrice === 'undefined' || itemPrice === undefined || itemPrice === null) return 0;

    if (itemPrice > 0) return divideBy100 ? itemPrice / 100 : item.price;

    return 'undefined';
  }

  getSluggedItemName(item) {
    var sluggedItemName = '' + item.url;
    sluggedItemName = sluggedItemName.split('?');

    if (sluggedItemName !== undefined)
      if (sluggedItemName[0] !== undefined || sluggedItemName[0] !== 'undefined') return sluggedItemName[0];

    return 'undefined';
  }

  getProductApiUrlBySluggedItemName(sluggedItemName) {
    return window.location.origin + sluggedItemName + '.js';
  }

  getCartUrl() {
    return window.location.origin + theme.routes.cart_url;
  }

  areWeCurrentlyOnCartPage() {
    return window?.location?.href?.includes('cart');
  }

  areWeCurrentlyOnProductsPage() {
    return window?.location?.href?.includes('products');
  }

  areWeCurrentlyOnCollectionsPage() {
    return window?.location?.href?.includes('collections');
  }

  //This the var used as second category
  getProductType() {
    var productType = document.querySelector('[data-product-type-json]');

    if (productType === undefined || productType === null) return undefined;

    return productType.innerText;
  }
  
} //class-end
</script>

<script>  
  //# sourceURL=argonDataLayer.js
  function getItemCategory() {
    let categoryFullTrail = '{{ product.metafields.custom.product_category }}'
    let categoryTrailSplitted = categoryFullTrail.split(' > ');
    let lastCategoryInTrail = categoryTrailSplitted[categoryTrailSplitted.length-1];

    return lastCategoryInTrail;
  }

  function getCategoryFullTrail() {
    let categoryFullTrail = '{{ product.metafields.custom.product_category }}';

  return categoryFullTrail;
  }

  window.dataLayer = window.dataLayer || [];
  window.dataLayer.push({
    {%- if template.name == "index" -%}
    "event": "HomeView",
    {%- endif -%}
    {%- if template.name == "collection" -%}
    "event": "CategoryView",
    {%- endif -%}
    {%- if template.name == "product" -%}
    "event": "ProductView",
    {%- endif -%}
    {%- if template.name == "cart" -%}
    "event": "CartView",
    {%- endif -%}
    "pageType": "{{ pageType }}"
  });

  var mcbGtmLayer = new McbGtmLayer();

  {%- if template.name == "product" -%}
  var cart_data = {{ cart | json }};
  var product = {{ product | json }};

  function getQuantityFromReplicator() {
    var quantityElement = document.querySelector('textarea[name="quantityReplicator"]');
    
    if(quantityElement !== undefined)
      return Number(quantityElement.innerHTML);
    
    return '1'; //standard fall-back quantity, if the product has no quantity selection option
  }
  
  function getCurrentVariant(form) {
    var selects = []
  
    if (typeof form !== 'undefined')
      selects = form.querySelectorAll('[name="id"]');
    else
      selects = document.querySelectorAll('form[action^="/cart/add"] radio[name="option1"]');
  
    if (!selects.length) return product.variants[0];
    var selectedId = selects[0].value;
  
    if (!/^[0-9]+$/.test(selectedId))
    return product.variants[0];
  
    return product.variants.filter(function(variant) {
      return variant.id == selectedId;
    })[0];
  }

  async function viewItemEvent(e) {
    await new Promise((r) => setTimeout(r, 600)); //delay is needed otherwise it will run too quick and siaply previous variants info as all data on site will not have been updated
    
    var variant = getCurrentVariant();
    let eventName = 'view_item';
    let currencyCode = '{{ cart.currency.iso_code }}';
    let url = location.href;
    let variantQuerySplitted = url.split('variant=');
    var product = {{ product | json }}
    var sku = "{{ product.selected_or_first_available_variant.sku | remove: "'" | remove: '"'  }}"; //use this sku if product has no variants
    
    if(variantQuerySplitted !== undefined) {
      let variantId = variantQuerySplitted[1];
      let selectedVariant = product.variants.find(v => v.id === Number(variantId));

        if (selectedVariant !== undefined)
          sku = selectedVariant.sku; //use this sku of the variant that we are currently viewing for this product
    }
    
    var swatchLabel = e?.htmlFor;
    var title = "{{ product.title | remove: "'" | remove: '"' }}" //"{{ product.selected_or_first_available_variant.title | remove: "'" | remove: '"' }}";
  
    let variantIdFromEvent = e?.htmlFor.split('-')[1];   
    let itemCategory = getItemCategory();
  
    window.dataLayer = window.dataLayer || [];
    window.dataLayer.push({
      "event": eventName,
      "ecommerce": {
        "currency": currencyCode,
        "value": {{ product.selected_or_first_available_variant.price | money_without_currency | remove: "." | replace: ',', '.' }},
          "items": [
            {
              "item_id": sku,
              "item_name": title,
              "item_brand": product.vendor,
              "price": {{ product.selected_or_first_available_variant.price | money_without_currency | remove: "." | replace: ',', '.' }},
              "item_category": itemCategory,
              "item_category2": "{{ product.type | remove: "'" | remove: '"' }}"
            },
          ],
      },
    });
  }

  async function addToCartPush(e) {
    let eventName = 'add_to_cart';
    //std: price is in correct format
    let price = "{{ product.selected_or_first_available_variant.price | money_without_currency | remove: "." | replace: ',', '.' }}";
    price = parseFloat(Number(price));
    let currencyCode = '{{ cart.currency.iso_code }}';
    let itemCategory = getItemCategory();

    let quantity = getQuantityFromReplicator();

    if (e !== undefined && e?.variant_id !== undefined) {
      //if we are dealing with a variant
      
      //variant price needs divided with 100
      let variant = e;
      price = parseFloat(Number(mcbGtmLayer.getFormattedPrice(variant, true)));
      
      window.dataLayer = window.dataLayer || [];
      dataLayer.push({
        "event": eventName,
        "ecommerce": {
          "currency": currencyCode,
          "value": price,
            "items": [
              {
                "item_id": ""+variant?.sku,
                "item_name": ""+variant?.product_title, //title: long title with variant name - //+variant?.product_title //short title,
                "item_brand": ""+variant?.vendor,
                "price": price,
                "item_category": itemCategory,
                "item_category2": ""+variant?.product_type,
                "quantity": quantity //get quantity from input box
              },
            ],
          },
      });
      
    } else {
      //if just product without variant
      window.dataLayer = window.dataLayer || [];
      dataLayer.push({
        "event": eventName,
        "ecommerce": {
          "currency": currencyCode,
          "value": price,
            "items": [
              {
                "item_id": "{{ product.selected_or_first_available_variant.sku }}",
                "item_name": "{{ product.title | remove: "'" | remove: '"' }}",
                "item_brand": "{{ product.vendor | remove: "'" | remove: '"' }}",
                "price": price,
                "item_category": itemCategory,
                "item_category2": "{{ product.type | remove: "'" | remove: '"' }}",
                "quantity": quantity //get quantity from input box
              },
            ],
          },
      });
    }
    
  }

   document.addEventListener('variant:add', function (event) {
    var variant = event.detail.items[0];
    addToCartPush(variant);
  });

  viewItemEvent();
  {%- endif -%}

  async function viewCartEvent(e) { 
    await new Promise((r) => setTimeout(r, 500));
    
    fetch('/cart.js')
    .then(response => response.json())
    .then(cartData => {
      
    let totalPrice = Number(cartData.total_price)/100;
    let productItems = cartData.items.map(function (item) {
      cartIdKey = item.key;
      return {
        item_id: item.sku,
        item_name: item.product_title,
        item_brand: item.vendor,
        price: parseFloat(item.price / 100.0),
        item_category: undefined,
        item_category2: item.product_type,
        quantity: item.quantity
      }
    });
  
    let eventName = 'view_cart';
    let currencyCode = '{{ cart.currency.iso_code }}';
  
    if (productItems?.length > 0) {
      window.dataLayer = window.dataLayer || [];
      window.dataLayer.push({
        "event": eventName,
        "currency": currencyCode,
        "value": totalPrice,
        "ecommerce": {
          "items":
            productItems,
        "cart_id": cartData?.token
        }
      });
    }
    }).catch((error) => {
        //suppress
        //console.error('Caught Exception: ' + error);
    });
  
    const checkoutBtn = document.querySelectorAll("button[name='checkout']");
    checkoutBtn.forEach((element) => {
        element.addEventListener('click', beginCheckOut);
    })
  }

  async function beginCheckOut(e) {
    e.preventDefault();
    await new Promise((r) => setTimeout(r, 100));
  
    var cart_data = {{ cart | json }};
  
    fetch('/cart.js')
    .then(response => response.json())
    .then(data => {
    let productItems = cart_data.items.map(function (item) {
      cartIdKey = item.key;
      return {
        item_id: item.sku,
        item_name: item.product_title,
        item_brand: item.vendor,
        price: parseFloat(item.price / 100.0),
        item_category: undefined,
        item_category2: item.product_type,
        quantity: item.quantity
      }
    });
  
    let eventName = 'begin_checkout';
    let totalPrice = Number(cart_data.checkout_charge_amount) / 100;
    let currencyCode = '{{ cart.currency.iso_code }}';
  
    let eventData = {
      "event": eventName,
      "currency": currencyCode,
      "value": totalPrice,
      "ecommerce": {
        "items":
          productItems
          ,
      "cart_id": data?.token
      }
    }
  
    window.dataLayer = window.dataLayer || [];
    window.dataLayer.push(eventData);
    }).catch((error) => {
        //suppress
        //console.error('error: ' + error);
    });
  
    await new Promise((r) => setTimeout(r, 160));
    window.location.href ='/checkout';
  }

  window.addEventListener("DOMContentLoaded", (event) => {
    var cartIcon = document.querySelector('[aria-controls="cart-drawer"]');
    cartIcon?.addEventListener('click', viewCartEvent);
    document.addEventListener('cart:change', viewCartEvent);
  
    {%- if template.name == "product" -%}
      var variantsSelectorContainer = document.querySelectorAll('.variant-picker__option-values');
      var mediaSwatchItems = variantsSelectorContainer[0]?.querySelectorAll('label.media-swatch');
  
      mediaSwatchItems?.forEach(element => {
        element.addEventListener('click', function(e) { viewItemEvent(e?.target); });
        }
      );
    {%- endif -%}
  
    const checkoutBtn = document.querySelectorAll("button[name='checkout']");
    checkoutBtn.forEach((element) => {
      element.addEventListener('click', beginCheckOut);
    })
  });
</script>
{%- if product -%}
  <textarea
    data-product-type-json
    class="hide"
    aria-hidden="true"
    aria-label="Product Type JSON"
    style="display:none;"
  >{{ product.type | remove: '& quot;'}}</textarea>
  <textarea type="hidden" class="hide" name="quantityReplicator" style="display:none;">1</textarea>
{%- endif -%}