{%- render 'section-spacing-collapsing' -%}

<style>
   #shopify-section-{{ section.id }} {
    --feature-chart-values-columns-count: 2;
  }

  @media screen and (min-width: 700px) {
    {%- if text_position == 'center' -%}
      #shopify-section-{{ section.id }} .section-stack__main {
        width: {% if values_column_count == 1 %}680px{% elsif values_column_count == 2 %}900px{% else %}auto{% endif %};
        min-width: 680px;
      }
    {%- else -%}
      #shopify-section-{{ section.id }} .section-stack {
        flex-wrap: wrap;
        justify-content: start;
      }

      

      #shopify-section-{{ section.id }} .section-stack__main {
        flex: 1 1 {% if values_column_count == 1 %}600px{% elsif values_column_count == 2 %}900px{% else %}auto{% endif %};
        min-width: 450px;
        width: auto;
      max-width: 820px;
      }
    {%- endif -%}
  }

  #shopify-section-{{ section.id }} {
    --product-grid: auto / minmax(0, 1fr);
    --product-gallery-media-list-grid: auto / auto-flow {% if section.settings.mobile_carousel_control == 'free_scroll' %}{% if section.settings.mobile_media_size == 'expanded' %}84vw{% else %}73vw{% endif %}{% else %}100%{% endif %};
    --product-gallery-media-list-gap: {% if section.settings.mobile_media_size == 'expanded' %}var(--spacing-0-5){% else %}var(--grid-gutter){% endif %};
  }

  @media screen and (max-width: 999px) {
    #shopify-section-{{ section.id }} {
      --section-spacing-block-start: {% if section.settings.mobile_media_size == 'expanded' %}0px{% else %}var(--container-gutter){% endif %};
    }
  }

  @media screen and (min-width: 1000px) {
    #shopify-section-{{ section.id }} {
      {%- assign media_ratio = section.settings.desktop_media_width | divided_by: 50.0 -%}
      --product-grid: auto / minmax(0, {{ media_ratio }}fr) minmax(0, {{ 2.0 | minus: media_ratio }}fr);
      --product-gallery-media-list-grid: {% if section.settings.desktop_media_layout contains 'grid' %}auto-flow dense / repeat(2, minmax(0, 1fr)){% else %}auto / auto-flow 100%{% endif %};
      --product-gallery-media-list-gap: calc(var(--grid-gutter) / 2);
    }

    {%- if section.settings.desktop_media_layout == 'grid_highlight' -%}
      #shopify-section-{{ section.id }} .product-gallery__media-list > :not([hidden]) {
        grid-column: span 2;
      }

      #shopify-section-{{ section.id }} .product-gallery__media-list > :not([hidden]) ~ *:not(.product-gallery__media--expand) {
        grid-column: span 1;
      }
    {%- endif -%}

    {%- if section.settings.desktop_media_layout == 'grid_column' -%}
      #shopify-section-{{ section.id }} .product-gallery__media-list > :not([hidden]) {
        grid-column: span 2;
      }
       #shopify-section-{{ section.id }} .product-gallery__media-list > :not([hidden]) ~ *:not(.product-gallery__media--expand) {
        grid-column: span 2;
      }
    {%- endif -%}
  }

  @media screen and (min-width: 1400px) {
    #shopify-section-{{ section.id }} {
      --product-gallery-media-list-gap: var(--grid-gutter);
    }
  }
</style>

<div {% render 'section-properties', tight: true %} >
  <div class="product-wrapper" id="divToExport">
    <div class="logo-on-pdf"><img src="{{ 'logo-pdf.jpg' | asset_img_url: '300x' }}" /></div>
    <div class="product product-custom">
      {%- if product.media.size > 0 -%}
        {%- render 'product-gallery', product: product -%}
      {%- endif -%}
      <safe-sticky class="product-info product-info--custom">
        {%- if request.page_type == 'product' -%}
            <h1 class="product-info__title {{ section.settings.heading_tag }}" >{{ product.title }}</h1>
        {%- else -%}
            <h2 class="product-info__title {{ section.settings.heading_tag }}">
              <a href="{{ product.url }}">{{ product.title }}</a>
            </h2>
        {%- endif -%}
        <feature-chart max-rows="{{ section.settings.max_rows }}" class="product-info-specs" >
          <div class="feature-chart__table feature-chart__table_pim divide-y scroll-area">
           
            {%- for block in section.blocks -%}
       
                {%- if block.settings.pim_value != blank -%} 
                                          
                    <div class="feature-chart__table-row-custom " > 
                      <div class="feature-chart__table-row__inner">
                        <div class="feature-chart__heading">{{ block.settings.title }}</div>
                        <div class="feature-chart__value text-subdued">{{ block.settings.pim_value }}</div>  
                      </div>                 
                    </div> 
                  {%- endif -%}       
                
              {%- endfor -%}
                 
          </div>
          <div class="moreless-button" data-html2canvas-ignore >
            <button class="text-with-icon group">
              <span class="feature-chart__toggle-text">{{- section.settings.view_all_text | escape -}}</span>
              <span class="circle-chevron">{%- render 'icon' with 'chevron-bottom-small' -%}</span>
            </button>
          </div>    
         </feature-chart>
        <div class="product-button-wrapper" data-html2canvas-ignore >     
          <button class="button" type="button" onclick="generatePDF()" class="uk-button uk-button-primary">{{'product.general.print_button_text' | t }}</button>
          {%- if section.settings.button_text != blank -%}    
            <a class="product-contact-button button" href="{{ section.settings.button_link }}">{{ section.settings.button_text }}</a>
          {%- endif -%}            
         </div>
      </safe-sticky>
      </div>
    </div>  

  </div>

{% schema %}
{
  "name": "Product page",
  "class": "shopify-section--main-product",
  "tag": "section",
  "blocks": [
    {
        "type": "item",
        "name": "Product info",
        "settings": [
        
        {
          "type": "text",
          "id": "title",
          "label": "Heading"
        },
        {
          "type": "text",
          "id": "pim_value",
          "label": "Value"
        }
 
      ]
    }
  ],
  "settings": [
    {
      "type": "checkbox",
      "id": "full_width",
      "label": "Full width",
      "default": true
    },
 
        {
          "type": "select",
          "id": "heading_tag",
          "label": "Style",
          "options": [
            {
              "value": "h1",
              "label": "H1"
            },
            {
              "value": "h2",
              "label": "H2"
            },
            {
              "value": "h3",
              "label": "H3"
            },
            {
              "value": "h4",
              "label": "H4"
            },
            {
              "value": "h5",
              "label": "H5"
            },
            {
              "value": "h6",
              "label": "H6"
            }
          ],
          "default": "h2"
        },
    {
      "type": "header",
      "content": "Media"
    },
    {
      "type": "paragraph",
      "content": "Learn more about [media types](https://help.shopify.com/en/manual/products/product-media)"
    },
    {
      "type": "range",
      "id": "desktop_media_width",
      "label": "Desktop media size",
      "min": 35,
      "max": 65,
      "step": 5,
      "unit": "%",
      "default": 55
    },
    {
      "type": "select",
      "id": "desktop_media_layout",
      "label": "Desktop media layout",
      "options": [
        {
          "value": "grid",
          "label": "Grid"
        },
        {
          "value": "grid_column",
          "label": "Grid 1 size"
        },
        {
          "value": "grid_highlight",
          "label": "Grid with main media"
        },
        {
          "value": "carousel_thumbnails_left",
          "label": "Thumbnails left (carousel)"
        },
        {
          "value": "carousel_thumbnails_bottom",
          "label": "Thumbnails bottom (carousel)"
        }
      ],
      "default": "carousel_thumbnails_left"
    },
    {
      "type":"select",
      "id": "mobile_media_size",
      "label": "Mobile media size",
      "options": [
        {
          "value": "expanded",
          "label": "Expanded"
        },
        {
          "value": "contained",
          "label": "Contained"
        }
      ],
      "default": "expanded"
    },
    {
      "type": "select",
      "id": "mobile_carousel_control",
      "label": "Mobile carousel control",
      "options": [
        {
          "value": "dots",
          "label": "Dots"
        },
        {
          "value": "floating_dots",
          "label": "Floating dots"
        },
        {
          "value": "thumbnails",
          "label": "Thumbnails"
        },
        {
          "value": "free_scroll",
          "label": "Free scroll"
        }
      ],
      "default": "floating_dots"
    },
    {
      "type": "checkbox",
      "id": "enable_video_autoplay",
      "label": "Enable video autoplay",
      "info": "Video are muted automatically to allow autoplay. Grid mode on desktop turn off autoplay.",
      "default": false
    },
    {
      "type": "checkbox",
      "id": "enable_video_looping",
      "label": "Enable video looping",
      "default": true
    },
    {
      "type": "header",
      "content": "Image zoom"
    },
    {
      "type": "checkbox",
      "id": "enable_image_zoom",
      "label": "Enable",
      "default": true
    },
    {
      "type": "range",
      "id": "max_image_zoom_level",
      "min": 1,
      "max": 4,
      "step": 0.5,
      "label": "Max zoom level",
      "default": 3
    },
    {
      "type": "header",
      "content": "Colors",
      "info": "Gradient replaces solid colors when set."
    },
    {
      "type": "color",
      "id": "background",
      "label": "Background"
    },
    {
      "type": "color_background",
      "id": "background_gradient",
      "label": "Background gradient"
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Text"
    },
    {
      "type": "header",
      "content": "Input colors",
      "info": "Applies to elements like quantity selector and variant selectors."
    },
    {
      "type": "color",
      "id": "input_background",
      "label": "Background",
      "default": "rgba(0,0,0,0)"
    },
    {
      "type": "color",
      "id": "input_text_color",
      "label": "Text"
    },
    {
      "type": "header",
      "content": "Chart"
    },
    {
      "type": "range",
      "id": "max_rows",
      "min": 1,
      "max": 20,
      "label": "Rows revealed by default",
      "default": 5,
      "info":"Only work if the total row larger than this setting"
    },
    {
      "type": "text",
      "id": "view_all_text",
      "label": "View all text",
      "default": "View all"
    },
    {
      "type": "text",
      "id": "view_less_text",
      "label": "View less text",
      "default": "View less"
    },
   
    {
      "type": "text",
      "id": "button_text",
      "label": "Contact button text"
    },
    {
      "type": "url",
      "id": "button_link",
      "label": "Contact button link"
    }
       
  ]
}
{% endschema %}


<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.9.3/html2pdf.bundle.min.js"></script>
<script>
  $(document).ready(function() {
    var moretextPim = "{{ section.settings.view_all_text | escape }}";
    var lesstextPim = "{{ section.settings.view_less_text | escape  }}";
    var maxRow = {{section.settings.max_rows}};
    var tableRowNumber = $('.feature-chart__table_pim').find(".feature-chart__table-row-custom").length; 
    var hiddenRowNumberStart = maxRow + 1;
    for (var i = hiddenRowNumberStart; i <= tableRowNumber; i++) {
      $('.feature-chart__table_pim').find(`.feature-chart__table-row-custom:nth-child(${i})`).addClass( "moretext_custom" );
    }
    if(tableRowNumber > maxRow ){
      $('.moreless-button').css( 'display','flex' );
    }

    if($.trim($('.feature-chart__table_pim').html())==''){
      $('.feature-chart__table_pim').closest( '.product-info-specs' ).hide();
    }

    $('.moreless-button').click(function() {
      $('.moretext_custom').slideToggle();
      var myStr = $('.moreless-button .feature-chart__toggle-text').text();
      if (myStr === moretextPim) {
        $('.moreless-button .feature-chart__toggle-text').text(lesstextPim)
        $('.moreless-button .icon').css('transform','rotate(180deg)');
      } else {
        $('.moreless-button .feature-chart__toggle-text').text(moretextPim);
        $('.moreless-button .icon').css('transform','rotate(0)');
      }
  });
});  

  
</script>

<script >
  let body = document.body;
  let html = document.documentElement;
  let height = Math.max(body.scrollHeight, body.offsetHeight,
  html.clientHeight, html.scrollHeight, html.offsetHeight);
  let element = document.getElementById('divToExport');
  let heightCM = height / 35.35;

   function generatePDF() {
      // Choose the element id which you want to export.
      var pageTitle = '{{ product.title}}.pdf';        
      var opt = {
          margin:       1,
          filename:     pageTitle,
          image:        { type: 'jpeg', quality: 1 },
          html2canvas:  { dpi: 75, letterRendering: true , scale: 2 },
          jsPDF:        { orientation: 'portrait',
            unit: 'cm',
            format: [heightCM, 40] },
            pagebreak:    { mode: ['avoid-all', 'css', 'legacy'] } 
        };        
      
      // choose the element and pass it to html2pdf() function and call the save() on it to save as pdf.
      html2pdf().from(element).set(opt).toPdf().get('pdf').then(function (pdf){
        var element = $('#divToExport');
        var footerText = '{{ 'general.accessibility.footer_pdf' | t }}';
        element.find('.logo-on-pdf').show();
        var totalPages = pdf.internal.getNumberOfPages(); 
        //print current pdf width & height to console
        for (var i = 1; i <= totalPages; i++) {
          pdf.setPage(i);
          pdf.setFontSize(16);
          pdf.setTextColor(0);
          //divided by 2 to go center
          pdf.text(footerText , pdf.internal.pageSize.getWidth()/2 - 12, 
          pdf.internal.pageSize.getHeight() - 4);
        } 
        })    
.save();
      //html2pdf().set(opt).from(element).save();
    }
</script>

